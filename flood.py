# -*- coding: utf-8 -*-
"""flood.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jMKAOsg54DZG0KNWx6dk9BurRKA_8YNb
"""

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from google.colab import drive
drive.mount('/content/drive')

IMG_SIZE = 224
BATCH_SIZE = 32

train_datagen =ImageDataGenerator(rescale=1./255,validation_split=0.2)
train_generator = train_datagen.flow_from_directory("/content/drive/MyDrive/flood",target_size=(IMG_SIZE, IMG_SIZE),batch_size=BATCH_SIZE,class_mode='categorical',subset='training')
val_generator = train_datagen.flow_from_directory("/content/drive/MyDrive/flood",target_size=(IMG_SIZE, IMG_SIZE),batch_size=BATCH_SIZE,class_mode='categorical',subset='validation')

class_indices=train_generator.class_indices
class_name=list(class_indices.keys())
print(class_indices)
print(class_name)

model = keras.Sequential([
 layers.Conv2D(32, (3, 3), activation='relu',
input_shape=(IMG_SIZE, IMG_SIZE, 3)),
 layers.MaxPooling2D((2, 2)),
 layers.Conv2D(64, (3, 3), activation='relu'),
 layers.MaxPooling2D((2, 2)),
 layers.Conv2D(128, (3, 3), activation='relu'),
 layers.MaxPooling2D((2, 2)),
 layers.Flatten(),
 layers.Dense(128, activation='relu'),
 layers.Dense(3, activation='softmax')
])
model.summary()
Model: "sequential"

model.compile(optimizer='adam', loss='categorical_crossentropy',
metrics=['accuracy'])
model.fit(train_generator, epochs=5, validation_data=val_generator,batch_size= BATCH_SIZE)

model.save('/content/drive/My Drive/flood_detection.h5')

from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt #visualisation
import numpy as np
model =load_model('/content/drive/My Drive/flood_detection.h5')
print("Model Loaded")

test_image_path="/content/drive/MyDrive/flood/flood/-93.528502_30.987438.jpeg"
img=image.load_img(test_image_path,target_size=(224,224))
plt.imshow(img)
plt.axis()
plt.show()

img_array=image.img_to_array(img)
img_array=np.expand_dims(img_array,axis=0)
img_array /= 255.
prediction = model.predict(img_array)
print(prediction)

ind=np.argmax(prediction[0])
print(class_name[ind])